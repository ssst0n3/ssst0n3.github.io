{"matrix":[[],[{"ID":62,"CreatedAt":"2023-06-29T11:07:19.555Z","UpdatedAt":"2023-06-29T11:07:19.555Z","DeletedAt":null,"title":"k8s apiserver 用户认证：Bootstrap Token 认证 源码分析","function_declare":"","git_url":"","note":"","code":"","markdown":"# k8s apiserver 用户认证：Bootstrap Token 认证 源码分析","child":0,"next":63},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":63,"CreatedAt":"2023-06-29T11:07:34.482Z","UpdatedAt":"2023-06-29T11:07:34.482Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"* 下一代源码分析：https://ssst0n3.github.io/source/#/static/source/k8s-apiserver-bootstrap-token-authn.json\n* 版本: v1.27.3\n* 源码地址：https://github.com/kubernetes/kubernetes/tree/v1.27.3\n* 入口： [func (a *Authenticator) AuthenticateRequest(req *http.Request) (*authenticator.Response, bool, error)](https://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/apiserver/pkg/authentication/request/bearertoken/bearertoken.go#L42)","last":62,"child":0,"next":64},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":64,"CreatedAt":"2023-06-29T11:07:47.911Z","UpdatedAt":"2023-06-29T11:07:47.911Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 1. 认证\n\n* 取 http 头中的 `Authorization` 字段\n* 取其中的token\n* 验证\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/apiserver/pkg/authentication/request/bearertoken/bearertoken.go#L42\n\n```go\nfunc (a *Authenticator) AuthenticateRequest(req *http.Request) (*authenticator.Response, bool, error) {\n\tauth := strings.TrimSpace(req.Header.Get(\"Authorization\"))\n\tif auth == \"\" {\n\t\treturn nil, false, nil\n\t}\n\tparts := strings.SplitN(auth, \" \", 3)\n\tif len(parts) < 2 || strings.ToLower(parts[0]) != \"bearer\" {\n\t\treturn nil, false, nil\n\t}\n\n\ttoken := parts[1]\n\n\t// Empty bearer tokens aren't valid\n\tif len(token) == 0 {\n\t\t// The space before the token case\n\t\tif len(parts) == 3 {\n\t\t\twarning.AddWarning(req.Context(), \"\", invalidTokenWithSpaceWarning)\n\t\t}\n\t\treturn nil, false, nil\n\t}\n\n\tresp, ok, err := a.auth.AuthenticateToken(req.Context(), token)\n\t// if we authenticated successfully, go ahead and remove the bearer token so that no one\n\t// is ever tempted to use it inside of the API server\n\tif ok {\n\t\treq.Header.Del(\"Authorization\")\n\t}\n\n\t// If the token authenticator didn't error, provide a default error\n\tif !ok && err == nil {\n\t\terr = invalidToken\n\t}\n\n\treturn resp, ok, err\n}\n```","last":63,"child":65,"next":0},{"ID":65,"CreatedAt":"2023-06-29T11:08:33.65Z","UpdatedAt":"2023-06-29T11:08:33.65Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"解析token\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/plugin/pkg/auth/authenticator/token/bootstrap/bootstrap.go#L90\n\n```go\nfunc (t *TokenAuthenticator) AuthenticateToken(ctx context.Context, token string) (*authenticator.Response, bool, error) {\n    tokenID, tokenSecret, err := bootstraptokenutil.ParseToken(token)\n    ...\n}\n```","parent":64,"child":67,"next":66},{"ID":67,"CreatedAt":"2023-06-29T11:09:05.766Z","UpdatedAt":"2023-06-29T11:09:05.766Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/cluster-bootstrap/util/tokens/tokens.go\n\n```go\nvar (\n    bootstrapTokenRe = regexp.MustCompile(api.BootstrapTokenPattern)\n)\n\nfunc ParseToken(s string) (tokenID, tokenSecret string, err error) {\n    split := bootstrapTokenRe.FindStringSubmatch(s)\n    if len(split) != 3 {\n        return \"\", \"\", fmt.Errorf(\"token [%q] was not of form [%q]\", s, api.BootstrapTokenPattern)\n    }\n    return split[1], split[2], nil\n}\n```\n","parent":65,"child":0,"next":68}],[{"ID":0,"markdown":""},{"ID":66,"CreatedAt":"2023-06-29T11:08:43.837Z","UpdatedAt":"2023-06-29T11:09:34.636Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"加载secret，如果不存在、正在被删除、类型错误、过期，则返回\n\n```go\nfunc (t *TokenAuthenticator) AuthenticateToken(ctx context.Context, token string) (*authenticator.Response, bool, error) {\n    ...\n    secretName := bootstrapapi.BootstrapTokenSecretPrefix + tokenID\n    secret, err := t.lister.Get(secretName)\n    if err != nil {\n        if errors.IsNotFound(err) {\n            klog.V(3).Infof(\"No secret of name %s to match bootstrap bearer token\", secretName)\n            return nil, false, nil\n        }\n        return nil, false, err\n    }\n    if secret.DeletionTimestamp != nil {\n        tokenErrorf(secret, \"is deleted and awaiting removal\")\n        return nil, false, nil\n    }\n\n    if string(secret.Type) != string(bootstrapapi.SecretTypeBootstrapToken) || secret.Data == nil {\n        tokenErrorf(secret, \"has invalid type, expected %s.\", bootstrapapi.SecretTypeBootstrapToken)\n        return nil, false, nil\n    }\n    ...\n    if bootstrapsecretutil.HasExpired(secret, time.Now()) {\n        // logging done in isSecretExpired method.\n        return nil, false, nil\n    }\n    ...\n}\n```","last":65,"child":0,"next":69},{"ID":68,"CreatedAt":"2023-06-29T11:09:19.574Z","UpdatedAt":"2023-06-29T11:09:19.574Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/cluster-bootstrap/token/api/types.go#L99\n\n```go\nconst (\n    BootstrapTokenPattern = `\\A([a-z0-9]{6})\\.([a-z0-9]{16})\\z`\n)\n```","last":67,"child":0,"next":0}],[{"ID":0,"markdown":""},{"ID":69,"CreatedAt":"2023-06-29T11:09:45.743Z","UpdatedAt":"2023-06-29T11:09:45.743Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"要求用户输入的id，token和secret中记录的一致。\n\n```go\nfunc (t *TokenAuthenticator) AuthenticateToken(ctx context.Context, token string) (*authenticator.Response, bool, error) {\n    ...\n    ts := bootstrapsecretutil.GetData(secret, bootstrapapi.BootstrapTokenSecretKey)\n    if subtle.ConstantTimeCompare([]byte(ts), []byte(tokenSecret)) != 1 {\n        tokenErrorf(secret, \"has invalid value for key %s.\", bootstrapapi.BootstrapTokenSecretKey)\n        return nil, false, nil\n    }\n\n    id := bootstrapsecretutil.GetData(secret, bootstrapapi.BootstrapTokenIDKey)\n    if id != tokenID {\n        tokenErrorf(secret, \"has invalid value for key %s.\", bootstrapapi.BootstrapTokenIDKey)\n        return nil, false, nil\n    }\n    ...\n}\n```","last":66,"child":0,"next":70},{"ID":-1,"markdown":""}],[{"ID":0,"markdown":""},{"ID":70,"CreatedAt":"2023-06-29T11:09:56.505Z","UpdatedAt":"2023-06-29T11:09:56.505Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"要求secret中标记`usage-bootstrap-authentication=true`\n\n```go\nfunc (t *TokenAuthenticator) AuthenticateToken(ctx context.Context, token string) (*authenticator.Response, bool, error) {\n    ...\n    if bootstrapsecretutil.GetData(secret, bootstrapapi.BootstrapTokenUsageAuthentication) != \"true\" {\n        tokenErrorf(secret, \"not marked %s=true.\", bootstrapapi.BootstrapTokenUsageAuthentication)\n        return nil, false, nil\n    }\n    ...\n}\n```","last":69,"child":0,"next":71},{"ID":-1,"markdown":""}],[{"ID":0,"markdown":""},{"ID":71,"CreatedAt":"2023-06-29T11:10:09.859Z","UpdatedAt":"2023-06-29T11:10:09.859Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"以上条件均满足，返回用户及组。\n\n```go\nfunc (t *TokenAuthenticator) AuthenticateToken(ctx context.Context, token string) (*authenticator.Response, bool, error) {\n    ...\n    groups, err := bootstrapsecretutil.GetGroups(secret)\n    if err != nil {\n        tokenErrorf(secret, \"has invalid value for key %s: %v.\", bootstrapapi.BootstrapTokenExtraGroupsKey, err)\n        return nil, false, nil\n    }\n\n    return &authenticator.Response{\n        User: &user.DefaultInfo{\n            Name:   bootstrapapi.BootstrapUserPrefix + string(id),\n            Groups: groups,\n        },\n    }, true, nil\n}\n```","last":70,"child":0,"next":0},{"ID":-1,"markdown":""}]],"toc":[{"nodeName":"H1","innerText":"k8s apiserver 用户认证：Bootstrap Token 认证 源码分析","id":"k8s-apiserver-用户认证：bootstrap-token-认证-源码分析"},{"nodeName":"H2","innerText":"1. 认证","id":"1-认证"}]}