{"matrix":[[],[{"ID":1,"CreatedAt":"2023-06-28T05:30:48.438Z","UpdatedAt":"2023-06-28T05:31:16.425Z","DeletedAt":null,"title":"kubeadm证书生成 源码分析","function_declare":"","git_url":"","note":"","code":"","markdown":"# kubeadm证书生成 源码分析","child":0,"next":2},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":2,"CreatedAt":"2023-06-28T05:31:11.053Z","UpdatedAt":"2023-06-28T05:31:11.053Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"* 版本: v1.27.3\n* 源码地址：https://github.com/kubernetes/kubernetes/tree/v1.27.3/cmd/kubeadm\n* 入口： [func newCertSubPhases() []workflow.Phase](https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/cmd/phases/init/certs.go#L64)","last":1,"child":0,"next":3},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":3,"CreatedAt":"2023-06-28T05:31:27.548Z","UpdatedAt":"2023-06-28T05:31:27.548Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 1. subPhases 证书生成的各阶段\n\n跳过前置的cmd构造步骤, 以subPhases作为入口。即，`kubeadm init phase certs`命令涉及的子命令/子阶段。\n\n```shell\n# kubeadm init phase certs --help\nThis command is not meant to be run on its own. See list of available subcommands.\n\nUsage:\n  kubeadm init phase certs [flags]\n  kubeadm init phase certs [command]\n\nAvailable Commands:\n  all                      Generate all certificates\n  apiserver                Generate the certificate for serving the Kubernetes API\n  apiserver-etcd-client    Generate the certificate the apiserver uses to access etcd\n  apiserver-kubelet-client Generate the certificate for the API server to connect to kubelet\n  ca                       Generate the self-signed Kubernetes CA to provision identities for other Kubernetes components\n  etcd-ca                  Generate the self-signed CA to provision identities for etcd\n  etcd-healthcheck-client  Generate the certificate for liveness probes to healthcheck etcd\n  etcd-peer                Generate the certificate for etcd nodes to communicate with each other\n  etcd-server              Generate the certificate for serving etcd\n  front-proxy-ca           Generate the self-signed CA to provision identities for front proxy\n  front-proxy-client       Generate the certificate for the front proxy client\n  sa                       Generate a private key for signing service account tokens along with its public key\n```","last":2,"child":0,"next":4},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":4,"CreatedAt":"2023-06-28T05:32:14.415Z","UpdatedAt":"2023-06-28T18:59:00.778Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"cert的子阶段/子命令 包括:\n\n* all: 添加了一个all，将执行下面所有的阶段。\n* CA/Cert: 添加各类型证书作为子阶段，用于k8s组件间通信\n    * CA证书，执行时调用`runCAPhase(cert)`\n    * 非CA证书，即由CA派生的证书，执行时调用`runCertPhase(cert, CACert)`\n* SA: 单独添加sa，用于签发service account token；单独设置的原因是sa不是x509标准的证书\n    * 执行时，调用`runCertsSa`\n\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/cmd/phases/init/certs.go#L64\n\n```go\nfunc newCertSubPhases() []workflow.Phase {\n    subPhases := []workflow.Phase{}\n\n    // All subphase\n    allPhase := workflow.Phase{\n        Name:           \"all\",\n        Short:          \"Generate all certificates\",\n        InheritFlags:   getCertPhaseFlags(\"all\"),\n        RunAllSiblings: true,\n    }\n\n    subPhases = append(subPhases, allPhase)\n\n    var lastCACert *certsphase.KubeadmCert\n    for _, cert := range certsphase.GetDefaultCertList() {\n        var phase workflow.Phase\n        if cert.CAName == \"\" {\n            phase = newCertSubPhase(cert, runCAPhase(cert))\n            lastCACert = cert\n        } else {\n            phase = newCertSubPhase(cert, runCertPhase(cert, lastCACert))\n        }\n        subPhases = append(subPhases, phase)\n    }\n\n    // SA creates the private/public key pair, which doesn't use x509 at all\n    saPhase := workflow.Phase{\n        Name:         \"sa\",\n        Short:        \"Generate a private key for signing service account tokens along with its public key\",\n        Long:         saKeyLongDesc,\n        Run:          runCertsSa,\n        InheritFlags: []string{options.CertificatesDir},\n    }\n\n    subPhases = append(subPhases, saPhase)\n\n    return subPhases\n}\n```","last":3,"child":5,"next":7},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":5,"CreatedAt":"2023-06-28T05:32:33.939Z","UpdatedAt":"2023-06-28T15:51:58.618Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 1.1 CA/Cert 证书列表\n\n一共3个CA，分别派生了多个证书, 分别为：\n\n* ca\n    * apiserver: Kubernetes API 服务端证书\n    * apiserver-kubelet-client: 用于 API server 作为客户端 访问 kubelet\n* front-proxy-ca\n    * front-proxy-client: 用于 front proxy 客户端访问\n* etcd-ca\n    * etcd-server: etcd 服务端证书\n    * etcd-peer: 用于 etcd 节点间互相通信\n    * etcd-healthcheck-client: 用于 liveness probes 对 etcd 健康检查\n    * apiserver-etcd-client: 用于 apiserver 作为客户端访问etcd\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L222C1-L237C2\n\n```go\nfunc GetDefaultCertList() Certificates {\n    return Certificates{\n        KubeadmCertRootCA(),\n        KubeadmCertAPIServer(),\n        KubeadmCertKubeletClient(),\n        // Front Proxy certs\n        KubeadmCertFrontProxyCA(),\n        KubeadmCertFrontProxyClient(),\n        // etcd certs\n        KubeadmCertEtcdCA(),\n        KubeadmCertEtcdServer(),\n        KubeadmCertEtcdPeer(),\n        KubeadmCertEtcdHealthcheck(),\n        KubeadmCertEtcdAPIClient(),\n    }\n}\n```","parent":4,"child":25,"next":6},{"ID":25,"CreatedAt":"2023-06-28T15:15:28.912Z","UpdatedAt":"2023-06-28T15:15:28.912Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L252\n\n```go\nfunc KubeadmCertRootCA() *KubeadmCert {\n    return &KubeadmCert{\n        Name:     \"ca\",\n        LongName: \"self-signed Kubernetes CA to provision identities for other Kubernetes components\",\n        BaseName: kubeadmconstants.CACertAndKeyBaseName,\n        config: pkiutil.CertConfig{\n            Config: certutil.Config{\n                CommonName: \"kubernetes\",\n            },\n        },\n    }\n}\n```","parent":5,"child":26,"next":28},{"ID":0,"markdown":""},{"ID":26,"CreatedAt":"2023-06-28T15:15:49.049Z","UpdatedAt":"2023-06-28T15:15:49.049Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L266\n\n```go\nfunc KubeadmCertAPIServer() *KubeadmCert {\n    return &KubeadmCert{\n        Name:     \"apiserver\",\n        LongName: \"certificate for serving the Kubernetes API\",\n        BaseName: kubeadmconstants.APIServerCertAndKeyBaseName,\n        CAName:   \"ca\",\n        config: pkiutil.CertConfig{\n            Config: certutil.Config{\n                CommonName: kubeadmconstants.APIServerCertCommonName,\n                Usages:     []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},\n            },\n        },\n        configMutators: []configMutatorsFunc{\n            makeAltNamesMutator(pkiutil.GetAPIServerAltNames),\n        },\n    }\n}\n```","parent":25,"child":0,"next":27},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":7,"CreatedAt":"2023-06-28T05:41:04.852Z","UpdatedAt":"2023-06-28T05:52:58.428Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 2. CAPhase: runCAPhase(cert)\n\n如果使用外部etcd，则跳过etcd ca证书的制备。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/cmd/phases/init/certs.go#L204\n\n```go\nfunc runCAPhase(ca *certsphase.KubeadmCert) func(c workflow.RunData) error {\n    return func(c workflow.RunData) error {\n        ...\n        if data.Cfg().Etcd.External != nil && ca.Name == \"etcd-ca\" {\n            ...\n        }\n        if cert, err := pkiutil.TryLoadCertFromDisk(data.CertificateDir(), ca.BaseName); err == nil {\n            certsphase.CheckCertificatePeriodValidity(ca.BaseName, cert)\n            ...\n        }\n        ...\n        return certsphase.CreateCACertAndKeyFiles(ca, cfg)\n    }\n}\n```","last":4,"child":10,"next":8},{"ID":10,"CreatedAt":"2023-06-28T06:05:40.882Z","UpdatedAt":"2023-06-28T06:05:40.882Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建CA证书并写入证书目录\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certs.go#L108\n\n```go\nfunc CreateCACertAndKeyFiles(certSpec *KubeadmCert, cfg *kubeadmapi.InitConfiguration) error {\n    ...\n    caCert, caKey, err := pkiutil.NewCertificateAuthority(certConfig)\n    if err != nil {\n        return err\n    }\n\n    return writeCertificateAuthorityFilesIfNotExist(\n        cfg.CertificatesDir,\n        certSpec.BaseName,\n        caCert,\n        caKey,\n    )\n}\n```","parent":7,"child":11,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":11,"CreatedAt":"2023-06-28T11:15:12.075Z","UpdatedAt":"2023-06-28T11:15:12.075Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建私钥及自签名CA证书\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L71\n\n```go\nfunc NewCertificateAuthority(config *CertConfig) (*x509.Certificate, crypto.Signer, error) {\n    key, err := NewPrivateKey(config.PublicKeyAlgorithm)\n    if err != nil {\n        return nil, nil, errors.Wrap(err, \"unable to create private key while generating CA certificate\")\n    }\n\n    cert, err := certutil.NewSelfSignedCACert(config.Config, key)\n    if err != nil {\n        return nil, nil, errors.Wrap(err, \"unable to create self-signed CA certificate\")\n    }\n\n    return cert, key, nil\n}\n```","parent":10,"child":12,"next":17},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":12,"CreatedAt":"2023-06-28T11:15:26.397Z","UpdatedAt":"2023-06-28T11:15:26.397Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建私钥，支持两种算法，RSA，ECDSA，默认为RSA，可以通过开启 feature-gates 的 PublicKeysECDSA 特性设置为 ECDSA。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L624\n\n```go\nimport (\n    ...\n    cryptorand \"crypto/rand\"\n    ...\n)\n\nconst (\n    ...\n    rsaKeySize             = 2048\n)\n\nvar NewPrivateKey = GeneratePrivateKey\n\nfunc GeneratePrivateKey(keyType x509.PublicKeyAlgorithm) (crypto.Signer, error) {\n    if keyType == x509.ECDSA {\n        return ecdsa.GenerateKey(elliptic.P256(), cryptorand.Reader)\n    }\n\n    return rsa.GenerateKey(cryptorand.Reader, rsaKeySize)\n}\n```","parent":11,"child":13,"next":16},{"ID":13,"CreatedAt":"2023-06-28T11:15:38.775Z","UpdatedAt":"2023-06-28T11:15:38.775Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"rsa的私钥生成方法，调用golang的crypto库。\n\nhttps://github.com/golang/go/blob/go1.20.5/src/crypto/rsa/rsa.go#L263\n\n```go\nfunc GenerateKey(random io.Reader, bits int) (*PrivateKey, error) {\n    return GenerateMultiPrimeKey(random, 2, bits)\n}\n```","parent":12,"child":14,"next":15},{"ID":14,"CreatedAt":"2023-06-28T11:15:50.184Z","UpdatedAt":"2023-06-28T11:15:50.184Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"限制了 e=65537, d必须存在，素数不相同\n\nhttps://github.com/golang/go/blob/go1.20.5/src/crypto/rsa/rsa.go#L286\n\n```go\nfunc GenerateMultiPrimeKey(random io.Reader, nprimes int, bits int) (*PrivateKey, error) {\n    randutil.MaybeReadByte(random)\n    ...\n    priv := new(PrivateKey)\n    priv.E = 65537\n    ...\n    primes := make([]*big.Int, nprimes)\n\nNextSetOfPrimes:\n    for {\n        todo := bits\n        if nprimes >= 7 {\n            todo += (nprimes - 2) / 5\n        }\n        for i := 0; i < nprimes; i++ {\n            var err error\n            primes[i], err = rand.Prime(random, todo/(nprimes-i))\n            if err != nil {\n                return nil, err\n            }\n            todo -= primes[i].BitLen()\n        }\n\n        // Make sure that primes is pairwise unequal.\n        for i, prime := range primes {\n            for j := 0; j < i; j++ {\n                if prime.Cmp(primes[j]) == 0 {\n                    continue NextSetOfPrimes\n                }\n            }\n        }\n\n        n := new(big.Int).Set(bigOne)\n        totient := new(big.Int).Set(bigOne)\n        pminus1 := new(big.Int)\n        for _, prime := range primes {\n            n.Mul(n, prime)\n            pminus1.Sub(prime, bigOne)\n            totient.Mul(totient, pminus1)\n        }\n        if n.BitLen() != bits {\n            continue NextSetOfPrimes\n        }\n\n        priv.D = new(big.Int)\n        e := big.NewInt(int64(priv.E))\n        ok := priv.D.ModInverse(e, totient)\n\n        if ok != nil {\n            priv.Primes = primes\n            priv.N = n\n            break\n        }\n    }\n\n    priv.Precompute()\n    return priv, nil\n}\n```","parent":13,"child":0,"next":0},{"ID":6,"CreatedAt":"2023-06-28T05:32:44.892Z","UpdatedAt":"2023-06-28T05:34:08.293Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"### 1.2 subPhase\n\ncert subPhase 的定义\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/cmd/phases/init/certs.go#L105\n\n```go\nfunc newCertSubPhase(certSpec *certsphase.KubeadmCert, run func(c workflow.RunData) error) workflow.Phase {\n    phase := workflow.Phase{\n        Name:  certSpec.Name,\n        Short: fmt.Sprintf(\"Generate the %s\", certSpec.LongName),\n        Long: fmt.Sprintf(\n            genericLongDesc,\n            certSpec.LongName,\n            certSpec.BaseName,\n            getSANDescription(certSpec),\n        ),\n        Run:          run,\n        InheritFlags: getCertPhaseFlags(certSpec.Name),\n    }\n    return phase\n}\n```","last":5,"child":0,"next":0},{"ID":28,"CreatedAt":"2023-06-28T15:21:55.638Z","UpdatedAt":"2023-06-28T15:21:55.638Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L302\n\n```go\nfunc KubeadmCertFrontProxyCA() *KubeadmCert {\n    return &KubeadmCert{\n        Name:     \"front-proxy-ca\",\n        LongName: \"self-signed CA to provision identities for front proxy\",\n        BaseName: kubeadmconstants.FrontProxyCACertAndKeyBaseName,\n        config: pkiutil.CertConfig{\n            Config: certutil.Config{\n                CommonName: \"front-proxy-ca\",\n            },\n        },\n    }\n}\n```","last":25,"child":29,"next":30},{"ID":29,"CreatedAt":"2023-06-28T15:23:18.038Z","UpdatedAt":"2023-06-28T15:23:18.038Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L316\n\n```go\nfunc KubeadmCertFrontProxyClient() *KubeadmCert {\n    return &KubeadmCert{\n        Name:     \"front-proxy-client\",\n        BaseName: kubeadmconstants.FrontProxyClientCertAndKeyBaseName,\n        LongName: \"certificate for the front proxy client\",\n        CAName:   \"front-proxy-ca\",\n        config: pkiutil.CertConfig{\n            Config: certutil.Config{\n                CommonName: kubeadmconstants.FrontProxyClientCertCommonName,\n                Usages:     []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth},\n            },\n        },\n    }\n}\n```","parent":28,"child":0,"next":0},{"ID":27,"CreatedAt":"2023-06-28T15:16:05.791Z","UpdatedAt":"2023-06-28T15:16:05.791Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L285\n\n```go\nfunc KubeadmCertKubeletClient() *KubeadmCert {\n    return &KubeadmCert{\n        Name:     \"apiserver-kubelet-client\",\n        LongName: \"certificate for the API server to connect to kubelet\",\n        BaseName: kubeadmconstants.APIServerKubeletClientCertAndKeyBaseName,\n        CAName:   \"ca\",\n        config: pkiutil.CertConfig{\n            Config: certutil.Config{\n                CommonName:   kubeadmconstants.APIServerKubeletClientCertCommonName,\n                Organization: []string{kubeadmconstants.SystemPrivilegedGroup},\n                Usages:       []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth},\n            },\n        },\n    }\n}\n```","last":26,"child":0,"next":0},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":8,"CreatedAt":"2023-06-28T05:41:14.439Z","UpdatedAt":"2023-06-28T16:01:56.321Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 3. CertPhase: runCertPhase(cert, CACert)\n\n如果使用外部etcd，则跳过etcd ca证书的制备。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/cmd/phases/init/certs.go#L252\n\n```go\nfunc runCertPhase(cert *certsphase.KubeadmCert, caCert *certsphase.KubeadmCert) func(c workflow.RunData) error {\n    return func(c workflow.RunData) error {\n        ...\n        if data.Cfg().Etcd.External != nil && cert.CAName == \"etcd-ca\" {\n            ...\n        }\n\n        if certData, intermediates, err := pkiutil.TryLoadCertChainFromDisk(data.CertificateDir(), cert.BaseName); err == nil {\n            certsphase.CheckCertificatePeriodValidity(cert.BaseName, certData)\n            ...\n        }\n        ...\n        return certsphase.CreateCertAndKeyFilesWithCA(cert, caCert, cfg)\n    }\n}\n```","last":7,"child":35,"next":9},{"ID":35,"CreatedAt":"2023-06-28T16:07:32.214Z","UpdatedAt":"2023-06-28T16:07:32.214Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"根据CA，创建密钥及证书\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certs.go#L153\n\n```go\nfunc CreateCertAndKeyFilesWithCA(certSpec *KubeadmCert, caCertSpec *KubeadmCert, cfg *kubeadmapi.InitConfiguration) error {\n    ...\n    caCert, caKey, err := LoadCertificateAuthority(cfg.CertificatesDir, caCertSpec.BaseName)\n    if err != nil {\n        return errors.Wrapf(err, \"couldn't load CA certificate %s\", caCertSpec.Name)\n    }\n\n    return certSpec.CreateFromCA(cfg, caCert, caKey)\n}\n```","parent":8,"child":36,"next":0},{"ID":0,"markdown":""},{"ID":36,"CreatedAt":"2023-06-28T18:23:42.178Z","UpdatedAt":"2023-06-28T18:23:42.178Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"先根据CA名称，加载CA密钥和证书\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certs.go#L167\n\n```go\nfunc LoadCertificateAuthority(pkiDir string, baseName string) (*x509.Certificate, crypto.Signer, error) {\n    ...\n    caCert, caKey, err := pkiutil.TryLoadCertAndKeyFromDisk(pkiDir, baseName)\n    if err != nil {\n        return nil, nil, errors.Wrapf(err, \"failure loading %s certificate authority\", baseName)\n    }\n    CheckCertificatePeriodValidity(baseName, caCert)\n    ...\n    return caCert, caKey, nil\n}\n```","parent":35,"child":37,"next":42},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":37,"CreatedAt":"2023-06-28T18:27:18.675Z","UpdatedAt":"2023-06-28T18:27:18.675Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L266\n\n```go\nfunc TryLoadCertAndKeyFromDisk(pkiPath, name string) (*x509.Certificate, crypto.Signer, error) {\n    cert, err := TryLoadCertFromDisk(pkiPath, name)\n    if err != nil {\n        return nil, nil, errors.Wrap(err, \"failed to load certificate\")\n    }\n\n    key, err := TryLoadKeyFromDisk(pkiPath, name)\n    if err != nil {\n        return nil, nil, errors.Wrap(err, \"failed to load key\")\n    }\n\n    return cert, key, nil\n}\n```","parent":36,"child":38,"next":40},{"ID":0,"markdown":""},{"ID":38,"CreatedAt":"2023-06-28T18:28:47.672Z","UpdatedAt":"2023-06-28T18:28:47.672Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L281\n\n```go\nfunc TryLoadCertFromDisk(pkiPath, name string) (*x509.Certificate, error) {\n    certificatePath := pathForCert(pkiPath, name)\n\n    certs, err := certutil.CertsFromFile(certificatePath)\n    if err != nil {\n        return nil, errors.Wrapf(err, \"couldn't load the certificate file %s\", certificatePath)\n    }\n\n    // Safely pick the first one because the sender's certificate must come first in the list.\n    // For details, see: https://www.rfc-editor.org/rfc/rfc4346#section-7.4.2\n    cert := certs[0]\n\n    return cert, nil\n}\n```","parent":37,"child":0,"next":39},{"ID":17,"CreatedAt":"2023-06-28T11:37:47.954Z","UpdatedAt":"2023-06-28T11:37:47.954Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"如果CA证书和私钥不存在，写入硬盘。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certs.go#L193\n\n```go\nfunc writeCertificateAuthorityFilesIfNotExist(pkiDir string, baseName string, caCert *x509.Certificate, caKey crypto.Signer) error {\n    if pkiutil.CertOrKeyExist(pkiDir, baseName) {\n        ...\n    } else {\n        if err := pkiutil.WriteCertAndKey(pkiDir, baseName, caCert, caKey); err != nil {\n            return errors.Wrapf(err, \"failure while saving %s certificate and key\", baseName)\n        }\n    }\n    return nil\n}\n```","last":11,"child":18,"next":0},{"ID":18,"CreatedAt":"2023-06-28T14:46:01.203Z","UpdatedAt":"2023-06-28T14:46:01.203Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L145\n\n```go\nfunc WriteCertAndKey(pkiPath string, name string, cert *x509.Certificate, key crypto.Signer) error {\n    if err := WriteKey(pkiPath, name, key); err != nil {\n        return errors.Wrap(err, \"couldn't write key\")\n    }\n\n    return WriteCert(pkiPath, name, cert)\n}\n```","parent":17,"child":19,"next":0},{"ID":19,"CreatedAt":"2023-06-28T14:46:13.95Z","UpdatedAt":"2023-06-28T14:54:39.642Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"写入密钥\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L188\n\n```go\nfunc WriteKey(pkiPath, name string, key crypto.Signer) error {\n    ...\n    privateKeyPath := pathForKey(pkiPath, name)\n    encoded, err := keyutil.MarshalPrivateKeyToPEM(key)\n    ...\n    if err := keyutil.WriteKey(privateKeyPath, encoded); err != nil {\n        return errors.Wrapf(err, \"unable to write private key to file %s\", privateKeyPath)\n    }\n\n    return nil\n}\n```","parent":18,"child":20,"next":22},{"ID":0,"markdown":""},{"ID":20,"CreatedAt":"2023-06-28T14:46:58.923Z","UpdatedAt":"2023-06-28T14:50:51.546Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"密钥的路径为 `%s.key` , 例如 ca 的路径即为 `ca.key`\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L400\n\n```go\nfunc pathForKey(pkiPath, name string) string {\n    return filepath.Join(pkiPath, fmt.Sprintf(\"%s.key\", name))\n}\n```","parent":19,"child":0,"next":21},{"ID":16,"CreatedAt":"2023-06-28T11:33:22.294Z","UpdatedAt":"2023-06-28T11:33:22.294Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"NewSelfSignedCACert 根据私钥生成X509格式的CA证书，默认有效期为一年。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/client-go/util/cert/cert.go#L58\n\n```go\nfunc NewSelfSignedCACert(cfg Config, key crypto.Signer) (*x509.Certificate, error) {\n    now := time.Now()\n    tmpl := x509.Certificate{\n        SerialNumber: new(big.Int).SetInt64(0),\n        Subject: pkix.Name{\n            CommonName:   cfg.CommonName,\n            Organization: cfg.Organization,\n        },\n        DNSNames:              []string{cfg.CommonName},\n        NotBefore:             now.UTC(),\n        NotAfter:              now.Add(duration365d * 10).UTC(),\n        KeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,\n        BasicConstraintsValid: true,\n        IsCA:                  true,\n    }\n\n    certDERBytes, err := x509.CreateCertificate(cryptorand.Reader, &tmpl, &tmpl, key.Public(), key)\n    if err != nil {\n        return nil, err\n    }\n    return x509.ParseCertificate(certDERBytes)\n}\n```","last":12,"child":0,"next":0},{"ID":15,"CreatedAt":"2023-06-28T11:22:53.983Z","UpdatedAt":"2023-06-28T11:22:53.983Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"ecdsa使用NIST P-256作为椭圆曲线。\n\nhttps://github.com/golang/go/blob/go1.20.5/src/crypto/ecdsa/ecdsa.go#L154\n\n```go\nfunc GenerateKey(c elliptic.Curve, rand io.Reader) (*PrivateKey, error) {\n    randutil.MaybeReadByte(rand)\n    ...\n    switch c.Params() {\n    ...\n    case elliptic.P256().Params():\n        return generateNISTEC(p256(), rand)\n    ...\n    }\n}\n```","last":13,"child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":30,"CreatedAt":"2023-06-28T15:24:26.038Z","UpdatedAt":"2023-06-28T15:24:26.038Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L332\n\n```go\nfunc KubeadmCertEtcdCA() *KubeadmCert {\n    return &KubeadmCert{\n        Name:     \"etcd-ca\",\n        LongName: \"self-signed CA to provision identities for etcd\",\n        BaseName: kubeadmconstants.EtcdCACertAndKeyBaseName,\n        config: pkiutil.CertConfig{\n            Config: certutil.Config{\n                CommonName: \"etcd-ca\",\n            },\n        },\n    }\n}\n```","last":28,"child":31,"next":0},{"ID":31,"CreatedAt":"2023-06-28T15:25:42.648Z","UpdatedAt":"2023-06-28T15:25:42.648Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L346\n\n```go\nfunc KubeadmCertEtcdServer() *KubeadmCert {\n    return &KubeadmCert{\n        Name:     \"etcd-server\",\n        LongName: \"certificate for serving etcd\",\n        BaseName: kubeadmconstants.EtcdServerCertAndKeyBaseName,\n        CAName:   \"etcd-ca\",\n        config: pkiutil.CertConfig{\n            Config: certutil.Config{\n                // TODO: etcd 3.2 introduced an undocumented requirement for ClientAuth usage on the\n                // server cert: https://github.com/coreos/etcd/issues/9785#issuecomment-396715692\n                // Once the upstream issue is resolved, this should be returned to only allowing\n                // ServerAuth usage.\n                Usages: []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth, x509.ExtKeyUsageClientAuth},\n            },\n        },\n        configMutators: []configMutatorsFunc{\n            makeAltNamesMutator(pkiutil.GetEtcdAltNames),\n            setCommonNameToNodeName(),\n        },\n    }\n}\n```","parent":30,"child":0,"next":32},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":9,"CreatedAt":"2023-06-28T05:41:24.311Z","UpdatedAt":"2023-06-28T19:03:54.491Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 4. SA: runCertsSa\n\n跳过外部CA，创建用于签发 serviceaccount token 的私钥和公钥。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/cmd/phases/init/certs.go#L178\n\n```go\nfunc runCertsSa(c workflow.RunData) error {\n    ...\n    if data.ExternalCA() {\n        fmt.Printf(\"[certs] Using existing sa keys\\n\")\n        return nil\n    }\n\n    // create the new service account key (or use existing)\n    return certsphase.CreateServiceAccountKeyAndPublicKeyFiles(data.CertificateWriteDir(), data.Cfg().ClusterConfiguration.PublicKeyAlgorithm())\n}\n```","last":8,"child":46,"next":0},{"ID":46,"CreatedAt":"2023-06-28T19:10:07.161Z","UpdatedAt":"2023-06-28T19:13:24.957Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"如果已经存在 sa.key, 就直接使用它。否则就创建并写入密钥。相关函数前文已分析过。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certs.go#L77\n\n```go\nfunc CreateServiceAccountKeyAndPublicKeyFiles(certsDir string, keyType x509.PublicKeyAlgorithm) error {\n    ...\n    _, err := keyutil.PrivateKeyFromFile(filepath.Join(certsDir, kubeadmconstants.ServiceAccountPrivateKeyName))\n    if err == nil {\n        ...\n        return nil\n    }\n    ...\n    key, err := pkiutil.NewPrivateKey(keyType)\n    ...\n    if err := pkiutil.WriteKey(certsDir, kubeadmconstants.ServiceAccountKeyBaseName, key); err != nil {\n        return err\n    }\n\n    return pkiutil.WritePublicKey(certsDir, kubeadmconstants.ServiceAccountKeyBaseName, key.Public())\n}\n```","parent":9,"child":47,"next":0},{"ID":47,"CreatedAt":"2023-06-28T19:10:25.264Z","UpdatedAt":"2023-06-28T19:13:34.869Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/constants/constants.go#L131\n\n```go\nconst (\n    ...\n    ServiceAccountKeyBaseName = \"sa\"\n    ...\n    ServiceAccountPrivateKeyName = \"sa.key\"\n    ...\n)\n```","parent":46,"child":0,"next":0},{"ID":42,"CreatedAt":"2023-06-28T18:37:05.713Z","UpdatedAt":"2023-06-28T18:37:05.713Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建证书和密钥并写入\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L68\n\n```go\nfunc (k *KubeadmCert) CreateFromCA(ic *kubeadmapi.InitConfiguration, caCert *x509.Certificate, caKey crypto.Signer) error {\n    ...\n    cert, key, err := pkiutil.NewCertAndKey(caCert, caKey, cfg)\n    if err != nil {\n        return err\n    }\n    err = writeCertificateFilesIfNotExist(\n        ic.CertificatesDir,\n        k.BaseName,\n        caCert,\n        cert,\n        key,\n        cfg,\n    )\n    ...\n}\n```","last":36,"child":43,"next":0},{"ID":43,"CreatedAt":"2023-06-28T18:39:41.666Z","UpdatedAt":"2023-06-28T18:42:17.966Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"创建私钥，并用私钥和CA生成证书。\n\nNewPrivateKey 上文分析过。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L101\n\n```go\nfunc NewCertAndKey(caCert *x509.Certificate, caKey crypto.Signer, config *CertConfig) (*x509.Certificate, crypto.Signer, error) {\n    ...\n    key, err := NewPrivateKey(config.PublicKeyAlgorithm)\n    ...\n    cert, err := NewSignedCert(config, key, caCert, caKey, false)\n    ...\n    return cert, key, nil\n}\n```","parent":42,"child":44,"next":0},{"ID":44,"CreatedAt":"2023-06-28T18:48:12.565Z","UpdatedAt":"2023-06-28T18:48:12.565Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"使用CA和私钥，签发证书。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L633\n\n```go\nfunc NewSignedCert(cfg *CertConfig, key crypto.Signer, caCert *x509.Certificate, caKey crypto.Signer, isCA bool) (*x509.Certificate, error) {\n    serial, err := cryptorand.Int(cryptorand.Reader, new(big.Int).SetInt64(math.MaxInt64))\n    ...\n    keyUsage := x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature\n    if isCA {\n        keyUsage |= x509.KeyUsageCertSign\n    }\n\n    RemoveDuplicateAltNames(&cfg.AltNames)\n\n    notAfter := time.Now().Add(kubeadmconstants.CertificateValidity).UTC()\n    if cfg.NotAfter != nil {\n        notAfter = *cfg.NotAfter\n    }\n\n    certTmpl := x509.Certificate{\n        Subject: pkix.Name{\n            CommonName:   cfg.CommonName,\n            Organization: cfg.Organization,\n        },\n        DNSNames:              cfg.AltNames.DNSNames,\n        IPAddresses:           cfg.AltNames.IPs,\n        SerialNumber:          serial,\n        NotBefore:             caCert.NotBefore,\n        NotAfter:              notAfter,\n        KeyUsage:              keyUsage,\n        ExtKeyUsage:           cfg.Usages,\n        BasicConstraintsValid: true,\n        IsCA:                  isCA,\n    }\n    certDERBytes, err := x509.CreateCertificate(cryptorand.Reader, &certTmpl, caCert, key.Public(), caKey)\n    if err != nil {\n        return nil, err\n    }\n    return x509.ParseCertificate(certDERBytes)\n}\n```","parent":43,"child":45,"next":0},{"ID":45,"CreatedAt":"2023-06-28T18:49:29.696Z","UpdatedAt":"2023-06-28T18:49:29.696Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"证书的过期时间也是1年。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/constants/constants.go#L49\n\n```go\nconst (\n    ...\n    CertificateValidity = time.Hour * 24 * 365\n    ...\n)\n```\n","parent":44,"child":0,"next":0},{"ID":40,"CreatedAt":"2023-06-28T18:33:54.65Z","UpdatedAt":"2023-06-28T18:33:54.65Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"检查证书是否过期\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certs.go#L520\n\n```go\nfunc CheckCertificatePeriodValidity(baseName string, cert *x509.Certificate) {\n    ...\n    if err := pkiutil.ValidateCertPeriod(cert, 0); err != nil {\n        ...\n    }\n}\n```","last":37,"child":41,"next":0},{"ID":41,"CreatedAt":"2023-06-28T18:35:10.984Z","UpdatedAt":"2023-06-28T18:35:10.984Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L699\n\n```go\nfunc ValidateCertPeriod(cert *x509.Certificate, offset time.Duration) error {\n    ...\n    now := time.Now().Add(offset)\n    if now.Before(cert.NotBefore) {\n        return errors.Errorf(\"the certificate is not valid yet: %s\", period)\n    }\n    if now.After(cert.NotAfter) {\n        return errors.Errorf(\"the certificate has expired: %s\", period)\n    }\n    return nil\n}\n```","parent":40,"child":0,"next":0},{"ID":39,"CreatedAt":"2023-06-28T18:30:36.23Z","UpdatedAt":"2023-06-28T18:30:36.23Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L312\n\n```go\nfunc TryLoadKeyFromDisk(pkiPath, name string) (crypto.Signer, error) {\n    privateKeyPath := pathForKey(pkiPath, name)\n\n    // Parse the private key from a file\n    privKey, err := keyutil.PrivateKeyFromFile(privateKeyPath)\n    if err != nil {\n        return nil, errors.Wrapf(err, \"couldn't load the private key file %s\", privateKeyPath)\n    }\n\n    // Allow RSA and ECDSA formats only\n    var key crypto.Signer\n    switch k := privKey.(type) {\n    case *rsa.PrivateKey:\n        key = k\n    case *ecdsa.PrivateKey:\n        key = k\n    default:\n        return nil, errors.Errorf(\"the private key file %s is neither in RSA nor ECDSA format\", privateKeyPath)\n    }\n\n    return key, nil\n}\n```","last":38,"child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":22,"CreatedAt":"2023-06-28T14:55:18.361Z","UpdatedAt":"2023-06-28T14:55:18.361Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"写入证书\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L154\n\n```go\nfunc WriteCert(pkiPath, name string, cert *x509.Certificate) error {\n    ...\n    certificatePath := pathForCert(pkiPath, name)\n    if err := certutil.WriteCert(certificatePath, EncodeCertPEM(cert)); err != nil {\n        return errors.Wrapf(err, \"unable to write certificate to file %s\", certificatePath)\n    }\n\n    return nil\n}\n```","last":19,"child":23,"next":0},{"ID":23,"CreatedAt":"2023-06-28T14:57:19.745Z","UpdatedAt":"2023-06-28T14:57:19.745Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"证书的路径为 `%s.key` , 例如 ca 的路径即为 `ca.crt`\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/util/pkiutil/pki_helpers.go#L396\n\n```go\nfunc pathForCert(pkiPath, name string) string {\n    return filepath.Join(pkiPath, fmt.Sprintf(\"%s.crt\", name))\n}\n```","parent":22,"child":0,"next":24},{"ID":21,"CreatedAt":"2023-06-28T14:47:11.393Z","UpdatedAt":"2023-06-28T15:02:05.105Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"\n密钥权限设置为 0600\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/client-go/util/keyutil/key.go#L67\n\n```go\nfunc WriteKey(keyPath string, data []byte) error {\n    if err := os.MkdirAll(filepath.Dir(keyPath), os.FileMode(0755)); err != nil {\n        return err\n    }\n    return os.WriteFile(keyPath, data, os.FileMode(0600))\n}\n```\n","last":20,"child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":32,"CreatedAt":"2023-06-28T15:26:56.425Z","UpdatedAt":"2023-06-28T15:26:56.425Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L369\n\n```go\nfunc KubeadmCertEtcdPeer() *KubeadmCert {\n    return &KubeadmCert{\n        Name:     \"etcd-peer\",\n        LongName: \"certificate for etcd nodes to communicate with each other\",\n        BaseName: kubeadmconstants.EtcdPeerCertAndKeyBaseName,\n        CAName:   \"etcd-ca\",\n        config: pkiutil.CertConfig{\n            Config: certutil.Config{\n                Usages: []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth, x509.ExtKeyUsageClientAuth},\n            },\n        },\n        configMutators: []configMutatorsFunc{\n            makeAltNamesMutator(pkiutil.GetEtcdPeerAltNames),\n            setCommonNameToNodeName(),\n        },\n    }\n}\n```","last":31,"child":0,"next":33},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":24,"CreatedAt":"2023-06-28T15:02:26.884Z","UpdatedAt":"2023-06-28T15:02:26.884Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"证书权限设置为 0644\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/client-go/util/cert/io.go#L64\n\n```go\nfunc WriteCert(certPath string, data []byte) error {\n    if err := os.MkdirAll(filepath.Dir(certPath), os.FileMode(0755)); err != nil {\n        return err\n    }\n    return os.WriteFile(certPath, data, os.FileMode(0644))\n}\n```\n","last":23,"child":0,"next":0},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":33,"CreatedAt":"2023-06-28T15:27:53.068Z","UpdatedAt":"2023-06-28T15:27:53.068Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L388\n\n```go\nfunc KubeadmCertEtcdHealthcheck() *KubeadmCert {\n    return &KubeadmCert{\n        Name:     \"etcd-healthcheck-client\",\n        LongName: \"certificate for liveness probes to healthcheck etcd\",\n        BaseName: kubeadmconstants.EtcdHealthcheckClientCertAndKeyBaseName,\n        CAName:   \"etcd-ca\",\n        config: pkiutil.CertConfig{\n            Config: certutil.Config{\n                CommonName:   kubeadmconstants.EtcdHealthcheckClientCertCommonName,\n                Organization: []string{kubeadmconstants.SystemPrivilegedGroup},\n                Usages:       []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth},\n            },\n        },\n    }\n}\n```","last":32,"child":0,"next":34},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":0,"markdown":""},{"ID":34,"CreatedAt":"2023-06-28T15:28:34.519Z","UpdatedAt":"2023-06-28T15:28:34.519Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"https://github.com/kubernetes/kubernetes/blob/v1.27.3/cmd/kubeadm/app/phases/certs/certlist.go#L405\n\n```go\nfunc KubeadmCertEtcdAPIClient() *KubeadmCert {\n    return &KubeadmCert{\n        Name:     \"apiserver-etcd-client\",\n        LongName: \"certificate the apiserver uses to access etcd\",\n        BaseName: kubeadmconstants.APIServerEtcdClientCertAndKeyBaseName,\n        CAName:   \"etcd-ca\",\n        config: pkiutil.CertConfig{\n            Config: certutil.Config{\n                CommonName:   kubeadmconstants.APIServerEtcdClientCertCommonName,\n                Organization: []string{kubeadmconstants.SystemPrivilegedGroup},\n                Usages:       []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth},\n            },\n        },\n    }\n}\n```","last":33,"child":0,"next":0},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}]],"toc":[{"nodeName":"H1","innerText":"kubeadm证书生成 源码分析","id":"kubeadm证书生成-源码分析"},{"nodeName":"H2","innerText":"1. subPhases 证书生成的各阶段","id":"1-subphases-证书生成的各阶段"},{"nodeName":"H3","innerText":"1.1 CA/Cert 证书列表","id":"11-cacert-证书列表"},{"nodeName":"H3","innerText":"1.2 subPhase","id":"12-subphase"},{"nodeName":"H2","innerText":"2. CAPhase: runCAPhase(cert)","id":"2-caphase-runcaphasecert"},{"nodeName":"H2","innerText":"3. CertPhase: runCertPhase(cert, CACert)","id":"3-certphase-runcertphasecert-cacert"},{"nodeName":"H2","innerText":"4. SA: runCertsSa","id":"4-sa-runcertssa"}]}