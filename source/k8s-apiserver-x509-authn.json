{"matrix":[[],[{"ID":48,"CreatedAt":"2023-06-29T07:15:16.009Z","UpdatedAt":"2023-06-29T07:15:16.009Z","DeletedAt":null,"title":"k8s apiserver 用户认证：x509 证书客户端认证 源码分析","function_declare":"","git_url":"","note":"","code":"","markdown":"# k8s apiserver 用户认证：x509 证书客户端认证 源码分析","child":0,"next":49},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":49,"CreatedAt":"2023-06-29T07:15:35.631Z","UpdatedAt":"2023-06-29T07:15:35.631Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"* 版本: v1.27.3\n* 源码地址：https://github.com/kubernetes/kubernetes/tree/v1.27.3\n* 入口： [func (a *Authenticator) AuthenticateRequest(req *http.Request) (*authenticator.Response, bool, error)](https://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/apiserver/pkg/authentication/request/x509/x509.go#L133)","last":48,"child":0,"next":50},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":50,"CreatedAt":"2023-06-29T07:15:50.884Z","UpdatedAt":"2023-06-29T07:15:50.884Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 1. 认证\n\n* 取TLS的PeerCertificates\n* 验证证书：调用golang的x509库\n* 获取用户名\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/apiserver/pkg/authentication/request/x509/x509.go#L133\n\n```go\nfunc (a *Authenticator) AuthenticateRequest(req *http.Request) (*authenticator.Response, bool, error) {\n    if req.TLS == nil || len(req.TLS.PeerCertificates) == 0 {\n        return nil, false, nil\n    }\n    optsCopy, ok := a.verifyOptionsFn()\n    ...\n    chains, err := req.TLS.PeerCertificates[0].Verify(optsCopy)\n    if err != nil {\n        ...\n    }\n\n    var errlist []error\n    for _, chain := range chains {\n        user, ok, err := a.user.User(chain)\n        if err != nil {\n            errlist = append(errlist, err)\n            continue\n        }\n\n        if ok {\n            return user, ok, err\n        }\n    }\n    ...\n}\n```\n","last":49,"child":51,"next":52},{"ID":51,"CreatedAt":"2023-06-29T07:16:04.971Z","UpdatedAt":"2023-06-29T07:16:04.971Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"apiserver 初始化时，如果启用了证书认证，初始化x509的认证实例。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/apiserver/pkg/authentication/authenticatorfactory/delegating.go#L87\n\n```go\nfunc (c DelegatingAuthenticatorConfig) New() (authenticator.Request, *spec.SecurityDefinitions, error) {\n    ...\n    if c.ClientCertificateCAContentProvider != nil {\n        authenticators = append(authenticators, x509.NewDynamic(c.ClientCertificateCAContentProvider.VerifyOptions, x509.CommonNameUserConversion))\n    }\n    ...\n}\n```","parent":50,"child":0,"next":0},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":52,"CreatedAt":"2023-06-29T07:16:14.386Z","UpdatedAt":"2023-06-29T07:16:14.386Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 2. 验证证书\n\n调用golang的crypto库验证证书。\n\nhttps://github.com/golang/go/blob/master/src/crypto/x509/verify.go#L748\n\n```go\nfunc (c *Certificate) Verify(opts VerifyOptions) (chains [][]*Certificate, err error) {\n    ...\n    if opts.Roots.contains(c) {\n        candidateChains = [][]*Certificate{{c}}\n    } else {\n        candidateChains, err = c.buildChains([]*Certificate{c}, nil, &opts)\n        if err != nil {\n            return nil, err\n        }\n    }\n    ...\n    for _, candidate := range candidateChains {\n        if checkChainForKeyUsage(candidate, opts.KeyUsages) {\n            chains = append(chains, candidate)\n        }\n    }\n    ...\n}\n```","last":50,"child":53,"next":54},{"ID":53,"CreatedAt":"2023-06-29T07:16:30.633Z","UpdatedAt":"2023-06-29T07:16:30.633Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"其中 `c.ClientCertificateCAContentProvider.VerifyOptions` 中包含了apiserver的ca\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/apiserver/pkg/server/options/authentication.go#L325-L351\n\n```go\nfunc (s *DelegatingAuthenticationOptions) ApplyTo(authenticationInfo *server.AuthenticationInfo, servingInfo *server.SecureServingInfo, openAPIConfig *openapicommon.Config) error {\n    ...\n    // get the clientCA information\n    clientCASpecified := s.ClientCert != ClientCertAuthenticationOptions{}\n    var clientCAProvider dynamiccertificates.CAContentProvider\n    if clientCASpecified {\n        clientCAProvider, err = s.ClientCert.GetClientCAContentProvider()\n        if err != nil {\n            return fmt.Errorf(\"unable to load client CA provider: %v\", err)\n        }\n        cfg.ClientCertificateCAContentProvider = clientCAProvider\n        if err = authenticationInfo.ApplyClientCert(cfg.ClientCertificateCAContentProvider, servingInfo); err != nil {\n            return fmt.Errorf(\"unable to assign client CA provider: %v\", err)\n        }\n\n    } else if !s.SkipInClusterLookup {\n        if client == nil {\n            klog.Warningf(\"No authentication-kubeconfig provided in order to lookup client-ca-file in configmap/%s in %s, so client certificate authentication won't work.\", authenticationConfigMapName, authenticationConfigMapNamespace)\n        } else {\n            clientCAProvider, err = dynamiccertificates.NewDynamicCAFromConfigMapController(\"client-ca\", authenticationConfigMapNamespace, authenticationConfigMapName, \"client-ca-file\", client)\n            if err != nil {\n                return fmt.Errorf(\"unable to load configmap based client CA file: %v\", err)\n            }\n            cfg.ClientCertificateCAContentProvider = clientCAProvider\n            if err = authenticationInfo.ApplyClientCert(cfg.ClientCertificateCAContentProvider, servingInfo); err != nil {\n                return fmt.Errorf(\"unable to assign configmap based client CA file: %v\", err)\n            }\n\n        }\n    }\n    ...\n}\n```","parent":52,"child":0,"next":0},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}],[{"ID":54,"CreatedAt":"2023-06-29T07:16:39.804Z","UpdatedAt":"2023-06-29T07:16:39.804Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"## 3. 获取用户名\n\nx509认证实例结构体定义\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/apiserver/pkg/authentication/request/x509/x509.go#L115-L130\n\n```go\ntype Authenticator struct {\n    verifyOptionsFn VerifyOptionFunc\n    user            UserConversion\n}\n\nfunc NewDynamic(verifyOptionsFn VerifyOptionFunc, user UserConversion) *Authenticator {\n    return &Authenticator{verifyOptionsFn, user}\n}\n```\n","last":52,"child":55,"next":0},{"ID":55,"CreatedAt":"2023-06-29T07:16:54.927Z","UpdatedAt":"2023-06-29T07:16:54.927Z","DeletedAt":null,"title":"","function_declare":"","git_url":"","note":"","code":"","markdown":"用户即证书中的CommonName字段。\n\nhttps://github.com/kubernetes/kubernetes/blob/v1.27.3/staging/src/k8s.io/apiserver/pkg/authentication/request/x509/x509.go#L248\n\n```go\nvar CommonNameUserConversion = UserConversionFunc(func(chain []*x509.Certificate) (*authenticator.Response, bool, error) {\n    if len(chain[0].Subject.CommonName) == 0 {\n        return nil, false, nil\n    }\n    return &authenticator.Response{\n        User: &user.DefaultInfo{\n            Name:   chain[0].Subject.CommonName,\n            Groups: chain[0].Subject.Organization,\n        },\n    }, true, nil\n})\n```","parent":54,"child":0,"next":0},{"ID":-1,"markdown":""},{"ID":-1,"markdown":""}]],"toc":[{"nodeName":"H1","innerText":"k8s apiserver 用户认证：x509 证书客户端认证 源码分析","id":"k8s-apiserver-用户认证：x509-证书客户端认证-源码分析"},{"nodeName":"H2","innerText":"1. 认证","id":"1-认证"},{"nodeName":"H2","innerText":"2. 验证证书","id":"2-验证证书"},{"nodeName":"H2","innerText":"3. 获取用户名","id":"3-获取用户名"}]}